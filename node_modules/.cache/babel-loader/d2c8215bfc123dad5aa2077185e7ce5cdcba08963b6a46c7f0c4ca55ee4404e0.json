{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adars\\\\my\\\\src\\\\components\\\\About.js\";\nimport React, { useState } from 'react';\nimport './About.css';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function About(props) {\n  //const[myStyle,setMyStyle]= useState({\n  //  color:'white',\n  //backgroundColor:'black'\n  //})\n  let myStyle = {\n    color: props.mode === 'dark' ? 'white' : 'black',\n    backgroundColor: props.mode === 'dark' ? '#521683' : 'white'\n  };\n  /*const[btnText,setBtnText]= useState(\"Enable Dark Mode\")\r\n  const toggleStyle=()=>{\r\n    if(myStyle.color==='white'){\r\n         setMyStyle({\r\n             color:'black',\r\n         backgroundColor:'white',\r\n         border: '1px solid white'\r\n        })\r\n         setBtnText(\"Enable Dark Mode\")\r\n     }\r\n     else{\r\n         setMyStyle({\r\n             color:'white',\r\n             backgroundColor:'black'\r\n         })\r\n         setBtnText(\"Enable Light Mode\")\r\n     }\r\n  }*/\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"b\",\n      style: myStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container1\",\n        style: myStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"About Us\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accordion\",\n          id: \"accordionExample\",\n          style: myStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-item\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"accordion-header\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"accordion-button\",\n                type: \"button\",\n                \"data-bs-toggle\": \"collapse\",\n                \"data-bs-target\": \"#collapseOne\",\n                \"aria-expanded\": \"true\",\n                \"aria-controls\": \"collapseOne\",\n                style: myStyle,\n                children: \"Accordion Item #1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"collapseOne\",\n              className: \"accordion-collapse collapse show\",\n              \"data-bs-parent\": \"#accordionExample\",\n              style: myStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accordion-body\",\n                style: myStyle,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"This is the first item's accordion body.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 29\n                }, this), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \".accordion-body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 448\n                }, this), \", though the transition does limit overflow.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-item\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"accordion-header\",\n              style: myStyle,\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"accordion-button collapsed\",\n                type: \"button\",\n                \"data-bs-toggle\": \"collapse\",\n                \"data-bs-target\": \"#collapseTwo\",\n                \"aria-expanded\": \"false\",\n                \"aria-controls\": \"collapseTwo\",\n                style: myStyle,\n                children: \"Accordion Item #2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"collapseTwo\",\n              className: \"accordion-collapse collapse\",\n              \"data-bs-parent\": \"#accordionExample\",\n              style: myStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accordion-body\",\n                style: myStyle,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"This is the second item's accordion body.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 29\n                }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \".accordion-body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 450\n                }, this), \", though the transition does limit overflow.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-item\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"accordion-header\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"accordion-button collapsed\",\n                type: \"button\",\n                \"data-bs-toggle\": \"collapse\",\n                \"data-bs-target\": \"#collapseThree\",\n                \"aria-expanded\": \"false\",\n                \"aria-controls\": \"collapseThree\",\n                style: myStyle,\n                children: \"Accordion Item #3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"collapseThree\",\n              className: \"accordion-collapse collapse\",\n              \"data-bs-parent\": \"#accordionExample\",\n              style: myStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accordion-body\",\n                style: myStyle,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"This is the third item's accordion body.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 29\n                }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \".accordion-body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 449\n                }, this), \", though the transition does limit overflow.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container1 my-4\",\n        style: myStyle,\n        children: \"A text utility website is an invaluable tool for anyone who regularly works with text, whether it's writing, editing, coding, or analyzing. These websites offer a collection of diverse and efficient tools designed to simplify and enhance various text-related tasks. From basic formatting and cleaning to advanced functions like text analysis and regular expression search, a text utility website empowers users to effortlessly manipulate and optimize their text content. With features such as text case conversion, character counting, sorting, and even translation, these websites save time and effort while ensuring accuracy and consistency in your textual endeavors. Whether you're a student, professional, developer, or content creator, a text utility website is a must-have resource in your digital toolkit.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","About","props","myStyle","color","mode","backgroundColor","children","className","style","fileName","_jsxFileName","lineNumber","columnNumber","id","type","_c","$RefreshReg$"],"sources":["C:/Users/adars/my/src/components/About.js"],"sourcesContent":["import React,{ useState } from 'react'\r\nimport './About.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function About(props) {\r\n    \r\n   \r\n    //const[myStyle,setMyStyle]= useState({\r\n      //  color:'white',\r\n        //backgroundColor:'black'\r\n       //})\r\nlet myStyle={\r\n    color: props.mode==='dark'?'white':'black',\r\n    backgroundColor: props.mode==='dark'?'#521683':'white'\r\n}\r\n /*const[btnText,setBtnText]= useState(\"Enable Dark Mode\")\r\nconst toggleStyle=()=>{\r\n   if(myStyle.color==='white'){\r\n        setMyStyle({\r\n            color:'black',\r\n        backgroundColor:'white',\r\n        border: '1px solid white'\r\n       })\r\n        setBtnText(\"Enable Dark Mode\")\r\n    }\r\n    else{\r\n        setMyStyle({\r\n            color:'white',\r\n            backgroundColor:'black'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n    }\r\n}*/\r\n  return (\r\n    <>\r\n    <div className=\"b\"style={myStyle}>\r\n    <div className=\"container1\" style={myStyle} >\r\n        <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\"style={myStyle}>\r\n                    <div className=\"accordion-item\"style={myStyle}>\r\n                        <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"style={myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\"style={myStyle}>\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" style={myStyle}>\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\"style={myStyle}>\r\n                        <div className=\"accordion-body\"style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"container my-3\">\r\n               <button onClick={toggleStyle} className=\"btn btn-dark\">{btnText}</button>\r\n  </div> */}\r\n</div>\r\n <div className=\"container1 my-4\" style={myStyle} >A text utility website is an invaluable tool for anyone who regularly works with text, whether it's writing, editing, coding, or analyzing. These websites offer a collection of diverse and efficient tools designed to simplify and enhance various text-related tasks. From basic formatting and cleaning to advanced functions like text analysis and regular expression search, a text utility website empowers users to effortlessly manipulate and optimize their text content. With features such as text case conversion, character counting, sorting, and even translation, these websites save time and effort while ensuring accuracy and consistency in your textual endeavors. Whether you're a student, professional, developer, or content creator, a text utility website is a must-have resource in your digital toolkit.\r\n\r\n </div>\r\n </div>\r\n </>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAQ,OAAO;AACtC,OAAO,aAAa;AACpB,OAAOC,SAAS,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,eAAe,SAASC,KAAKA,CAACC,KAAK,EAAE;EAGjC;EACE;EACE;EACD;EACP,IAAIC,OAAO,GAAC;IACRC,KAAK,EAAEF,KAAK,CAACG,IAAI,KAAG,MAAM,GAAC,OAAO,GAAC,OAAO;IAC1CC,eAAe,EAAEJ,KAAK,CAACG,IAAI,KAAG,MAAM,GAAC,SAAS,GAAC;EACnD,CAAC;EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBACEP,OAAA,CAAAE,SAAA;IAAAO,QAAA,eACAT,OAAA;MAAKU,SAAS,EAAC,GAAG;MAAAC,KAAK,EAAEN,OAAQ;MAAAI,QAAA,gBACjCT,OAAA;QAAKU,SAAS,EAAC,YAAY;QAACC,KAAK,EAAEN,OAAQ;QAAAI,QAAA,gBACvCT,OAAA;UAAAS,QAAA,EAAI;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACbf,OAAA;UAAKU,SAAS,EAAC,WAAW;UAACM,EAAE,EAAC,kBAAkB;UAAAL,KAAK,EAAEN,OAAQ;UAAAI,QAAA,gBACvDT,OAAA;YAAKU,SAAS,EAAC,gBAAgB;YAAAC,KAAK,EAAEN,OAAQ;YAAAI,QAAA,gBAC1CT,OAAA;cAAIU,SAAS,EAAC,kBAAkB;cAAAD,QAAA,eAChCT,OAAA;gBAAQU,SAAS,EAAC,kBAAkB;gBAACO,IAAI,EAAC,QAAQ;gBAAC,kBAAe,UAAU;gBAAC,kBAAe,cAAc;gBAAC,iBAAc,MAAM;gBAAC,iBAAc,aAAa;gBAAAN,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,EAAC;cAE3K;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,eACLf,OAAA;cAAKgB,EAAE,EAAC,aAAa;cAACN,SAAS,EAAC,kCAAkC;cAAC,kBAAe,mBAAmB;cAAAC,KAAK,EAAEN,OAAQ;cAAAI,QAAA,eACpHT,OAAA;gBAAKU,SAAS,EAAC,gBAAgB;gBAACC,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,gBAC3CT,OAAA;kBAAAS,QAAA,EAAQ;gBAAwC;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,8WAA0W,eAAAf,OAAA;kBAAAS,QAAA,EAAM;gBAAe;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,gDACnc;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACNf,OAAA;YAAKU,SAAS,EAAC,gBAAgB;YAACC,KAAK,EAAEN,OAAQ;YAAAI,QAAA,gBAC3CT,OAAA;cAAIU,SAAS,EAAC,kBAAkB;cAACC,KAAK,EAAEN,OAAQ;cAAAI,QAAA,eAChDT,OAAA;gBAAQU,SAAS,EAAC,4BAA4B;gBAACO,IAAI,EAAC,QAAQ;gBAAC,kBAAe,UAAU;gBAAC,kBAAe,cAAc;gBAAC,iBAAc,OAAO;gBAAC,iBAAc,aAAa;gBAAAN,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,EAAC;cAEtL;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,eACLf,OAAA;cAAKgB,EAAE,EAAC,aAAa;cAACN,SAAS,EAAC,6BAA6B;cAAC,kBAAe,mBAAmB;cAAAC,KAAK,EAAEN,OAAQ;cAAAI,QAAA,eAC/GT,OAAA;gBAAKU,SAAS,EAAC,gBAAgB;gBAAAC,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,gBAC1CT,OAAA;kBAAAS,QAAA,EAAQ;gBAAyC;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,+WAA2W,eAAAf,OAAA;kBAAAS,QAAA,EAAM;gBAAe;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,gDACrc;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACNf,OAAA;YAAKU,SAAS,EAAC,gBAAgB;YAACC,KAAK,EAAEN,OAAQ;YAAAI,QAAA,gBAC3CT,OAAA;cAAIU,SAAS,EAAC,kBAAkB;cAAAD,QAAA,eAChCT,OAAA;gBAAQU,SAAS,EAAC,4BAA4B;gBAACO,IAAI,EAAC,QAAQ;gBAAC,kBAAe,UAAU;gBAAC,kBAAe,gBAAgB;gBAAC,iBAAc,OAAO;gBAAC,iBAAc,eAAe;gBAACN,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,EAAC;cAE3L;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,eACLf,OAAA;cAAKgB,EAAE,EAAC,eAAe;cAACN,SAAS,EAAC,6BAA6B;cAAC,kBAAe,mBAAmB;cAACC,KAAK,EAAEN,OAAQ;cAAAI,QAAA,eAClHT,OAAA;gBAAKU,SAAS,EAAC,gBAAgB;gBAACC,KAAK,EAAEN,OAAQ;gBAAAI,QAAA,gBAC3CT,OAAA;kBAAAS,QAAA,EAAQ;gBAAwC;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,+WAA2W,eAAAf,OAAA;kBAAAS,QAAA,EAAM;gBAAe;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,gDACpc;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CAAC,eACLf,OAAA;QAAKU,SAAS,EAAC,iBAAiB;QAACC,KAAK,EAAEN,OAAQ;QAAAI,QAAA,EAAE;MAElD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACJ,CAAC;AAEJ;AAACG,EAAA,GAlFuBf,KAAK;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}